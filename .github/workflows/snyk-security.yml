# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which sets up Snyk to analyze the full Snyk platform (Snyk Open Source, Snyk Code,
# Snyk Container and Snyk Infrastructure as Code)
# The setup installs the Snyk CLI - for more details on the possible commands
# check https://docs.snyk.io/snyk-cli/cli-reference
# The results of Snyk Code are then uploaded to GitHub Security Code Scanning
#
# In order to use the Snyk Action you will need to have a Snyk API token.
# More details in https://github.com/snyk/actions#getting-your-snyk-token
# or you can signup for free at https://snyk.io/login
#
# For more examples, including how to limit scans to only high-severity issues
# and fail PR checks, see https://github.com/snyk/actions/

name: Snyk Security

on:
  workflow_dispatch:
  push:
    branches: ["dotnet"]
  pull_request:
    branches: ["dotnet"]

permissions:
  contents: read

concurrency:
  group: snyk-${{ github.workflow }}
  cancel-in-progress: false

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          [ ubuntu-jammy, ubuntu-jammy-dotnet, ubuntu-focal, ubuntu-bionic, debian-bullseye, debian-sid, debian-bullseye-dotnet, ]
        include:
          - os: ubuntu-jammy
            distro: ubuntu
            distro-version: 22.04
          - os: ubuntu-jammy-dotnet
            distro: ubuntu
            distro-version: 22.04
            dockerfile: Dockerfile.dotnet
          - os: ubuntu-focal
            distro: ubuntu
            distro-version: 20.04
          - os: ubuntu-bionic
            distro: ubuntu
            distro-version: 18.04
          - os: debian-bullseye
            distro: debian
            distro-version: 11
          - os: debian-sid
            distro: debian
            distro-version: 10
          - os: debian-bullseye-dotnet
            dockerfile: Dockerfile.dotnet
            distro: debian
            distro-version: 11
    steps:
      - name: Set version by default
        shell: pwsh
        run: |
          Write-Output 'PREFIX=${{ matrix.os }}' >> $env:GITHUB_ENV
          Write-Output 'REVISION=${{ github.RUN_NUMBER }}.${{ github.RUN_ATTEMPT }}' >> $env:GITHUB_ENV
          Write-Output 'RELEASE_VERSION=${{ vars.GH_RUNNER_VERSION }}' >> $env:GITHUB_ENV
          Write-Output 'BASE_BUILD_IMAGE=${{ vars.RELEASE_IMAGE_NAME }}-base:${{ matrix.os }}' >> $env:GITHUB_ENV
          Write-Output 'RELEASE_IMAGE_NAME=${{ vars.RELEASE_IMAGE_NAME }}' >> $env:GITHUB_ENV
          if( [string]::IsNullOrWhitespace('${{ matrix.dockerfile }}') )
          {
            Write-Output 'DOCKERFILE=Dockerfile' >> $env:GITHUB_ENV
          }
          else
          {
            Write-Output 'DOCKERFILE=${{ matrix.dockerfile }}' >> $env:GITHUB_ENV
          }
      - name: Copy Repo Files
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@1d672a455ab3339ef0a0021e1ec809165ee12fad

        # For Snyk Open Source you must first set up the development environment for your application's dependencies
        # For example for Node
      - uses: actions/setup-node@v4
        with:
            node-version: 16
        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk code test --fail-on=upgradable --sarif > snyk-code.sarif || true

#        # Build the docker image for testing
#      - name: Build a Docker image
#        run: |
#          docker build --build-arg BASE_IMAGE=${{ secrets.DOCKER_USER }}/${{ env.BASE_BUILD_IMAGE }} --build-arg CHOWN_USER=${{ vars.CHOWN_USER }} \
#          --build-arg DISTRO=${{ matrix.distro }} --build-arg DISTRO_VERSION=${{ matrix.distro-version }} --build-arg GH_RUNNER_VERSION=${{ vars.GH_RUNNER_VERSION }} \
#          --platform linux/amd64 --tag ${{ secrets.DOCKER_USER }}/${{ env.RELEASE_IMAGE_NAME }} --file=${{ env.DOCKERFILE }} .
        
      - name: Container test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container test --print-deps --fail-on=upgradable ${{ secrets.DOCKER_USER }}/${{ env.RELEASE_IMAGE_NAME }} \
          --username=${{ secrets.DOCKER_USER }} --password=${{ secrets.DOCKER_TOKEN }} --file=${{ env.DOCKERFILE }} .

      - name: Container test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container test --print-deps ghcr.io/${{ secrets.DOCKER_USER }}/${{ env.RELEASE_IMAGE_NAME }} --fail-on=upgradable \
          --username=${{ secrets.DOCKER_USER }} --password=${{ secrets.DOCKER_TOKEN }} --file=${{ env.DOCKERFILE }} .

        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      - name: Snyk Container monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container monitor ${{ secrets.DOCKER_USER }}/${{ env.RELEASE_IMAGE_NAME }} --file=${{ env.DOCKERFILE }}

        # Runs Snyk Container (Container and SCA) analysis and uploads result to Snyk.
      - name: Snyk Container monitor
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk container monitor ghcr.io/${{ secrets.DOCKER_USER }}/${{ env.RELEASE_IMAGE_NAME }} --file=${{ env.DOCKERFILE }}

        # Push the Snyk Code results into GitHub Code Scanning tab
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk-code.sarif

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Snyk Open Source monitor
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk monitor --all-projects
