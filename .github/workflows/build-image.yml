name: "Action Runner Image build"
run-name: "Action Runner Image build ${{ github.ref_name }} by ${{ github.event_name }}"
on:
  workflow_dispatch:
  push:
    branches: dotnet
    paths:
      - "build-image.yml"
      - "Dockerfile"
      - 'Dockerfile.dotnet'
  workflow_run:
    workflows: [BASE build, RELEASE update]
    types: [completed]

permissions:
  contents: read
  packages: write

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref_name }}
#  cancel-in-progress: true

jobs:
  pull-build-push:
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    strategy:
      fail-fast: false
      matrix:
        os:
          [ ubuntu-jammy, ubuntu-jammy-dotnet, ubuntu-focal, ubuntu-bionic, debian-bullseye, debian-sid, debian-bullseye-dotnet, ]
        include:
          - os: ubuntu-jammy
            distro: ubuntu
            distro-version: 22.04
            has-latest: true
          - os: ubuntu-jammy-dotnet
            distro: ubuntu
            distro-version: 22.04
            dockerfile: Dockerfile.dotnet
          - os: ubuntu-focal
            distro: ubuntu
            distro-version: 20.04
          - os: ubuntu-bionic
            distro: ubuntu
            distro-version: 18.04
          - os: debian-bullseye
            distro: debian
            distro-version: 11
          - os: debian-sid
            distro: debian
            distro-version: 10
          - os: debian-bullseye-dotnet
            dockerfile: Dockerfile.dotnet
            distro: debian
            distro-version: 11
    env:
      RELEASE_IMAGE_NAME: ${{ vars.RELEASE_IMAGE_NAME }}
      FULL_TAG: ''
      BASE_BUILD_IMAGE: ''
      LATEST_FLAG: ''
      RELEASE_VERSION: ${{ vars.GH_RUNNER_VERSION }}
      REVISION: '${{ github.RUN_NUMBER }}.${{ github.RUN_ATTEMPT }}'
      DOCKERFILE: ''
      PREFIX: ''
    steps:
      - name: Copy Repo Files
        uses: actions/checkout@v4
      - name: Set version by default
        shell: pwsh
        run: |
          Write-Output 'PREFIX=${{ matrix.os }}' >> $env:GITHUB_ENV
          Write-Output 'FULL_TAG=${{ matrix.os }}-${{ vars.GH_RUNNER_VERSION }}-${{ github.RUN_NUMBER }}.${{ github.RUN_ATTEMPT }}' >> $env:GITHUB_ENV
          Write-Output 'BASE_BUILD_IMAGE=${{ env.RELEASE_IMAGE_NAME }}-base:${{ matrix.os }}' >> $env:GITHUB_ENV
          $LatestFlag = ([string]::IsNullOrWhitespace('${{ matrix.has-latest }}') ? 'false' : 'true')
          Write-Output "LATEST_FLAG=$LatestFlag" >> $env:GITHUB_ENV
          if( [string]::IsNullOrWhitespace('${{ matrix.dockerfile }}') )
          {
            Write-Output 'DOCKERFILE=Dockerfile' >> $env:GITHUB_ENV
          }
          else
          {
            Write-Output 'DOCKERFILE=${{ matrix.dockerfile }}' >> $env:GITHUB_ENV
          }
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.ACTOR }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          labels: |
            org.opencontainers.image.name=${{ github.ACTOR }}/${{ env.RELEASE_IMAGE_NAME }}
            org.opencontainers.image.version=${{ env.FULL_TAG }}
            org.opencontainers.image.base.name=${{ github.ACTOR }}/${{ env.BASE_BUILD_IMAGE }}
            org.opencontainers.image.revision=${{ env.REVISION }}
            org.opencontainers.image.licenses=MIT
          images: |
            ${{ github.ACTOR }}/${{ env.RELEASE_IMAGE_NAME }}
            ghcr.io/${{ github.ACTOR }}/${{ env.RELEASE_IMAGE_NAME }}
          flavor: |
            latest=false
            prefix=
            suffix=
          tags: |
            type=raw,value=${{ env.PREFIX }},enable=true
            type=raw,value=${{ env.FULL_TAG }},enable=true
            type=raw,value=latest,enable=${{ env.LATEST_FLAG }}
            type=raw,value=${{ env.PREFIX }}-latest,enable=${{ env.LATEST_FLAG }}
            type=raw,value=${{ env.RELEASE_VERSION }},enable=${{ env.LATEST_FLAG }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          provenance: true
          sbom: true
          pull: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_IMAGE=${{ github.ACTOR }}/${{ env.BASE_BUILD_IMAGE }}
            CHOWN_USER=${{ vars.CHOWN_USER }}
            DISTRO=${{ matrix.distro }}
            DISTRO_VERSION=${{ matrix.distro-version }}
            GH_RUNNER_VERSION=${{ vars.GH_RUNNER_VERSION }}
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
